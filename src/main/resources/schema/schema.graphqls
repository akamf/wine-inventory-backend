type Query {
    getUser(username: String!): User
    getAllUsers: [User]

    getInventoryByUserId(userId: String!): WineInventory

    getWineById(id: ID!): Wine
    getAllWines: [Wine]
}

type Mutation {
    createUser(user: UserInput!): User

    addWineToInventory(userId: String!, wine: WineInput!): WineInventory
    removeWineFromInventory(userId: String!, wineId: String!): WineInventory

    createWine(wine: WineInput!): Wine
    updateWine(id: ID!, wine: WineInput!): Wine
    deleteWine(id: ID!): Boolean
}

type User {
    id: ID!
    username: String!
    password: String!
    email: String!
    createdAt: String
    inventoryId: String
}

input UserInput {
    username: String!
    password: String!
    email: String!
}

type Wine {
    id: ID!
    name: String!
    type: String!
    country: String!
    year: Int
    price: Float
}

type WineEntry {
    id: ID!
    wine: Wine
    dateAcquired: String
    dateRemoved: String
    amount: Int
}

type WineInventory {
    id: ID!
    currentWines: [WineEntry!]!
    wineHistory: [WineEntry!]!
}

input WineInput {
    name: String!
    type: String!
    country: String
    year: Int
    price: Float
}
